generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id       String @id @default(uuid())
  roleName String @unique @default("User")
  users    User[]
}

model User {
  id               String    @id @default(uuid())
  password         String
  roleId           String
  cId              Int       @unique
  userName         String    @unique
  CreatedAt        DateTime  @default(now())
  UpdatedAt        DateTime  @updatedAt
  createdCompanies Company[] @relation("CreatedCompanies")
  updatedCompanies Company[] @relation("UpdatedCompanies")
  company          Company?
  role             Role      @relation(fields: [roleId], references: [id])
}

model Company {
  id              String          @id @default(uuid())
  userId          String          @unique
  C_Logo_Image    Bytes?
  C_Name          String?
  C_QR_URL        String?
  CreatedAt       DateTime        @default(now())
  UpdatedAt       DateTime        @updatedAt
  Welcoming_Page  Bytes?
  createdBy       String?
  updatedBy       String?
  menuType        String?         @default("none")
  pdfMenuUrl      String?
  creator         User?           @relation("CreatedCompanies", fields: [createdBy], references: [id])
  updater         User?           @relation("UpdatedCompanies", fields: [updatedBy], references: [id])
  user            User            @relation(fields: [userId], references: [id])
  Main_Categories MainCategory[]
  Password_resets PasswordReset[]
  Themes          Theme[]

  orders Order[]
}

model MainCategory {
  id              String        @id @default(uuid())
  companyId       String
  name            String
  categoryNo      Int
  company         Company       @relation(fields: [companyId], references: [id])
  subCategories   SubCategory[]

  @@index([companyId])
}

model PasswordReset {
  id               String   @id @default(uuid())
  previousPassword String
  newPassword      String
  resetTime        DateTime @default(now())
  companyId        String
  company          Company  @relation(fields: [companyId], references: [id])

  @@index([companyId])
}

model SubCategory {
  id             String       @id @default(uuid())
  name           String
  orderNo        Int
  mainCategoryId String
  menuImageUrl  String?
  price          Float?
  stock          Boolean      @default(true)
  mainCategory   MainCategory @relation(fields: [mainCategoryId], references: [id])

  @@index([mainCategoryId])
  orderItems OrderItem[]
}

model Theme {
  backgroundColor String?
  companyId       String
  facebookUrl     String?
  id              String  @id @default(uuid())
  instagramUrl    String?
  logoAreaColor   String?
  style           String
  textColor       String?
  xUrl            String?
  company         Company @relation(fields: [companyId], references: [id])

  @@index([companyId])
}
model Order {
  id             String        @id @default(uuid())
  tableNumber    Int
  companyId      String
  createdAt      DateTime      @default(now())
  isActive       Boolean        @default(false)
  totalAmount    Float
  note           String?
  company        Company       @relation(fields: [companyId], references: [id])
  orderItems     OrderItem[]

  @@index([companyId])
  @@index([tableNumber])
}

model OrderItem {
  id             String        @id @default(uuid())
  orderId        String
  subCategoryId  String
  quantity       Int
  paidQuantity Int      @default(0)
  price          Float         // price at the time of order
  isPaid         Boolean       @default(false) 
  subCategory    SubCategory   @relation(fields: [subCategoryId], references: [id])
  order          Order         @relation(fields: [orderId], references: [id])

  @@index([orderId])
  @@index([subCategoryId])
}
